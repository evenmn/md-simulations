'''
Packing water based on the packmol package. 
'''

class WaterPack:
    def __init__(self, nummol=2000, lencube=39.1523):
        '''
        Constructor for the WaterPack class.
        
        Arguments:
        ----------
        nummol    {int}   :   Number of molecules. Note: this is not necessarily
                              equal to the number of particles in the MD-sim.
        lencube   {float} :   Length of packed cube given in Å (Ångstrøm).
        '''
        self.nummol = nummol
        self.lencube = lencube
        
    def den2len(self, density):
        '''
        Returns the length of the cube given the density.
        
        Arguments:
        ----------
        density     {float} :   Desired density of water. Unit g/cm^3
        '''
        self.density = density
        self.mass_H2O = 18.01       # Mass of H2O molecule, g/mol
        NA = 6.02214075e23          # Avogadro's number, mol^-1
        self.total_mass = self.nummol * self.mass_H2O / NA  # Total mass, g
        self.volume = self.total_mass / density             # Volume, cm^3
        length = self.volume**(1/3.)                        # Length, cm
        self.lencube = length * 1e8                         # Length, Å
        return self.lencube
        
        
    def packmol_gen(self, infile="../packmol/input.inp", 
                          outfile="../packmol/water_packmol.data", 
                          filetype="xyz",
                          structure="../packmol/water.xyz",
                          tolerance=2.0,
                          pbc=None):
        '''
        Generate Packmol input script. 
        
        Arguments:
        ----------
        infile      {str}   :   File to write to.
        outfile     {str}   :   File generated when running packmol script.
        filetype    {str}   :   Type of output file. Must match structure file.
        structure   {str}   :   File that determines the structure of a single
                                water molecule.
        tolerance   {str}   :   Minimum distance between molecules. 2.0 default.
        pbc         {float} :   Width of gap at boundary given in [Å].
        '''
        self.infile = infile
        self.outfile = outfile
        self.lenbox = self.lencube      # lencube is length of water bulk
        if pbc is not None:
            self.lencube -= pbc
        
        f = open(infile, "w")
        f.write("tolerance {}\n".format(tolerance))
        f.write("output {}\n".format(outfile))
        f.write("filetype {}\n".format(filetype))
        f.write("structure {}\n".format(structure))
        f.write("  number {}\n".format(self.nummol))
        f.write("  inside cube 0. 0. 0. {}\n".format(self.lencube))
        f.write("end structure\n")
        f.close()
        print("Generated file " + infile)
        
    def packmol_run(self):
        '''
        Run the Packmol input script generated by self.packmol_gen.
        '''
        from os import system
        call_string = "packmol < {}".format(self.infile)
        system(call_string)
        print("Packmol script run and file {} generated".format(self.outfile))

    def xyz2lmp(self, out="../data/water_lmps.data"):
        '''
        Convert the packmol outfile (on xyz filetype) to Lammps readable
        file.
        
        Arguments:
        ----------
        out     {str}   :   Output file after converting.
        '''
        with open(out, 'w') as outfile:
            # Write header
            outfile.write(out + " (Built by Packmol)\n\n")
            outfile.write("{} atoms\n".format(3*self.nummol))
            outfile.write("2 atom types\n")
            outfile.write("0.0          {} xlo xhi\n".format(self.lenbox))
            outfile.write("0.0          {} ylo yhi\n".format(self.lenbox))
            outfile.write("0.0          {} zlo zhi\n\n".format(self.lenbox))
            outfile.write("Atoms\n\n")
            # Write positions
            with open(self.outfile, 'r') as infile:
                for i, line in enumerate(infile):
                    if i > 1:
                        line = str(i-1) + line
                        line = line.replace("H", "1")
                        line = line.replace("O", "2")
                        outfile.write(line)
        print("Converted from xyz-filetype to LAMMPS-friendly filetype, {}".format(out))
                    
if __name__ == "__main__":

    ### EXAMPLE SCRIPT
    packer = WaterPack(nummol=2000)
    packer.den2len(density=0.9966)
    packer.packmol_gen(pbc=1.0)
    packer.packmol_run()
    packer.xyz2lmp()
